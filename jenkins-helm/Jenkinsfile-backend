pipeline {
  agent none
  options {
    skipDefaultCheckout()
    skipStagesAfterUnstable()
  }
  environment {
    CHART_NAME = 'msvc-repo/msvc-chart'
    IMAGE_BASE = 'anshelen/microservices-backend'
    IMAGE_TAG = "v$BUILD_NUMBER"
  	IMAGE_NAME = "${env.IMAGE_BASE}:${env.IMAGE_TAG}"
  	IMAGE_NAME_LATEST = "${env.IMAGE_BASE}:latest"
  }
  stages {
    stage('Checkout') {
      agent any
      steps {
        checkout scm
        stash(name: 'sources', includes: '**')
      }
    }

    stage("Prepare container") {
      agent {
        docker {
          image 'openjdk:11.0.5-slim'
          args '-v $HOME/.m2:/root/.m2'
        }
      }
      stages {
        stage('Build') {
          steps {
            unstash 'sources'
            sh './mvnw compile'
            stash(name: 'compiled', includes: '**')
          }
        }
        stage('Test') {
          steps {
            unstash 'compiled'
            sh './mvnw test'
            junit '**/target/surefire-reports/TEST-*.xml'
          }
        }
      }
    }

    stage('Push images') {
      agent any
      when {
        branch 'master'
      }
      steps {
        unstash 'sources'
        script {
          def imageName = "${env.IMAGE_NAME}"
          def dockerImage = docker.build("${env.IMAGE_NAME}")
          docker.withRegistry('', 'dockerhub-creds') {
            dockerImage.push()
            dockerImage.push("latest")
          }
          echo "Pushed Docker Image: ${env.IMAGE_NAME}"
        }
        sh "docker rmi ${env.IMAGE_NAME} ${env.IMAGE_NAME_LATEST}"
      }
    }

    stage('Trigger kubernetes') {
      agent any
      when {
        branch 'master'
      }
      steps {
        withKubeConfig([credentialsId: 'kubernetes-creds', serverUrl: "${CLUSTER_URL}", namespace: 'msvc-ns']) {
          sh "helm upgrade ${HELM_PROJECT} ${env.CHART_NAME} --reuse-values --set backend.image.tag=${env.IMAGE_TAG}"
        }
      }
    }
  }
}
